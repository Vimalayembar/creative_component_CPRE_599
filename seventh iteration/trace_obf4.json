(function () {
    try {
        var g = function () {
            return typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : this;
        }();
        var __trace = {
            entries: [],
            add: function (func, line) {
                try {
                    this.entries.push({
                        function: func,
                        line: line
                    });
                } catch (e) {
                }
            },
            output: function () {
                try {
                    if (this.entries && this.entries.length) {
                        try {
                            if (typeof process !== 'undefined' && process.stderr && process.stderr.write)
                                process.stderr.write(JSON.stringify(this.entries) + '\n');
                        } catch (e) {
                            console.log(JSON.stringify(this.entries));
                        }
                    }
                } catch (e) {
                }
            }
        };
        try {
            Object.defineProperty(g, '__trace', {
                value: __trace,
                configurable: true,
                writable: true,
                enumerable: false
            });
        } catch (e) {
            g.__trace = __trace;
        }
        try {
            if (typeof process !== 'undefined' && process && process.on)
                process.on('beforeExit', function () {
                    __trace.output();
                });
        } catch (e) {
        }
        try {
            setTimeout(function () {
                __trace.output();
            }, 1000);
        } catch (e) {
        }
        var __genCount = 0;
        function wrapGeneratedFunction(fn, name) {
            if (typeof fn !== 'function')
                return fn;
            if (fn.__is_traced)
                return fn;
            var wrapped = function () {
                try {
                    __trace.add(name || 'generated_' + ++__genCount, 0);
                } catch (e) {
                }
                return fn.apply(this, arguments);
            };
            try {
                Object.defineProperty(wrapped, 'name', {
                    value: name || fn.name || 'generated',
                    configurable: true
                });
            } catch (e) {
            }
            try {
                wrapped.prototype = fn.prototype;
            } catch (e) {
            }
            try {
                wrapped.__is_traced = true;
            } catch (e) {
            }
            return wrapped;
        }
        (function () {
            try {
                var OriginalFunction = Function;
                function TracedFunction() {
                    var created = OriginalFunction.apply(this, arguments);
                    try {
                        return wrapGeneratedFunction(created, 'generated_fn');
                    } catch (e) {
                        return created;
                    }
                }
                try {
                    TracedFunction.prototype = OriginalFunction.prototype;
                } catch (e) {
                }
                try {
                    Object.defineProperty(g, 'Function', {
                        value: TracedFunction,
                        configurable: true,
                        writable: true,
                        enumerable: false
                    });
                } catch (e) {
                    g.Function = TracedFunction;
                }
            } catch (e) {
            }
        }());
        (function () {
            try {
                var origEval = eval;
                function tracedEval(s) {
                    try {
                        __trace.add('eval', 0);
                    } catch (e) {
                    }
                    ;
                    return origEval(s);
                }
                try {
                    Object.defineProperty(g, 'eval', {
                        value: tracedEval,
                        configurable: true,
                        writable: true,
                        enumerable: false
                    });
                } catch (e) {
                    g.eval = tracedEval;
                }
            } catch (e) {
            }
        }());
        (function () {
            try {
                var origSetTimeout = g.setTimeout;
                if (typeof origSetTimeout === 'function') {
                    function tracedSetTimeout(cb, t) {
                        try {
                            if (typeof cb === 'function')
                                cb = wrapGeneratedFunction(cb, cb.name || 'timer_callback');
                        } catch (e) {
                        }
                        ;
                        return origSetTimeout.apply(this, [
                            cb,
                            t
                        ].concat(Array.prototype.slice.call(arguments, 2)));
                    }
                    try {
                        Object.defineProperty(g, 'setTimeout', {
                            value: tracedSetTimeout,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        g.setTimeout = tracedSetTimeout;
                    }
                }
            } catch (e) {
            }
            try {
                var origSetInterval = g.setInterval;
                if (typeof origSetInterval === 'function') {
                    function tracedSetInterval(cb, t) {
                        try {
                            if (typeof cb === 'function')
                                cb = wrapGeneratedFunction(cb, cb.name || 'timer_callback');
                        } catch (e) {
                        }
                        ;
                        return origSetInterval.apply(this, [
                            cb,
                            t
                        ].concat(Array.prototype.slice.call(arguments, 2)));
                    }
                    try {
                        Object.defineProperty(g, 'setInterval', {
                            value: tracedSetInterval,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        g.setInterval = tracedSetInterval;
                    }
                }
            } catch (e) {
            }
            try {
                var origSetImmediate = g.setImmediate;
                if (typeof origSetImmediate === 'function') {
                    function tracedSetImmediate(cb) {
                        try {
                            if (typeof cb === 'function')
                                cb = wrapGeneratedFunction(cb, cb.name || 'immediate_callback');
                        } catch (e) {
                        }
                        ;
                        return origSetImmediate.apply(this, arguments);
                    }
                    try {
                        Object.defineProperty(g, 'setImmediate', {
                            value: tracedSetImmediate,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        g.setImmediate = tracedSetImmediate;
                    }
                }
            } catch (e) {
            }
            try {
                var origQueueMicrotask = g.queueMicrotask;
                if (typeof origQueueMicrotask === 'function') {
                    function tracedQueueMicrotask(cb) {
                        try {
                            if (typeof cb === 'function')
                                cb = wrapGeneratedFunction(cb, cb.name || 'microtask_callback');
                        } catch (e) {
                        }
                        ;
                        return origQueueMicrotask.call(this, cb);
                    }
                    try {
                        Object.defineProperty(g, 'queueMicrotask', {
                            value: tracedQueueMicrotask,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        g.queueMicrotask = tracedQueueMicrotask;
                    }
                }
            } catch (e) {
            }
        }());
        (function () {
            try {
                var P = Promise && Promise.prototype;
                if (P && P.then) {
                    var origThen = P.then;
                    function tracedThen() {
                        var args = Array.prototype.slice.call(arguments);
                        try {
                            if (typeof args[0] === 'function')
                                args[0] = wrapGeneratedFunction(args[0], args[0].name || 'promise_then');
                        } catch (e) {
                        }
                        try {
                            if (typeof args[1] === 'function')
                                args[1] = wrapGeneratedFunction(args[1], args[1].name || 'promise_then_rej');
                        } catch (e) {
                        }
                        return origThen.apply(this, args);
                    }
                    try {
                        Object.defineProperty(P, 'then', {
                            value: tracedThen,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        P.then = tracedThen;
                    }
                }
            } catch (e) {
            }
            try {
                if (P && P.catch) {
                    var origCatch = P.catch;
                    function tracedCatch() {
                        var args = Array.prototype.slice.call(arguments);
                        try {
                            if (typeof args[0] === 'function')
                                args[0] = wrapGeneratedFunction(args[0], args[0].name || 'promise_catch');
                        } catch (e) {
                        }
                        return origCatch.apply(this, args);
                    }
                    try {
                        Object.defineProperty(P, 'catch', {
                            value: tracedCatch,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        P.catch = tracedCatch;
                    }
                }
            } catch (e) {
            }
            try {
                if (P && P.finally) {
                    var origFinally = P.finally;
                    function tracedFinally() {
                        var args = Array.prototype.slice.call(arguments);
                        try {
                            if (typeof args[0] === 'function')
                                args[0] = wrapGeneratedFunction(args[0], args[0].name || 'promise_finally');
                        } catch (e) {
                        }
                        return origFinally.apply(this, args);
                    }
                    try {
                        Object.defineProperty(P, 'finally', {
                            value: tracedFinally,
                            configurable: true,
                            writable: true,
                            enumerable: false
                        });
                    } catch (e) {
                        P.finally = tracedFinally;
                    }
                }
            } catch (e) {
            }
        }());
        (function () {
            try {
                var OriginalProxy = Proxy;
                function TracedProxy(target, handler) {
                    try {
                        if (handler && typeof handler === 'object') {
                            var newHandler = {};
                            var traps = [
                                'get',
                                'set',
                                'apply',
                                'construct',
                                'defineProperty',
                                'getOwnPropertyDescriptor',
                                'ownKeys'
                            ];
                            traps.forEach(function (t) {
                                if (typeof handler[t] === 'function') {
                                    newHandler[t] = function () {
                                        var fn = handler[t];
                                        try {
                                            fn = wrapGeneratedFunction(fn, fn.name || 'proxy_trap_' + t);
                                        } catch (e) {
                                        }
                                        return fn.apply(this, arguments);
                                    };
                                } else if (handler[t] !== undefined) {
                                    newHandler[t] = handler[t];
                                }
                            });
                            for (var k in handler) {
                                if (!newHandler.hasOwnProperty(k))
                                    newHandler[k] = handler[k];
                            }
                            return new OriginalProxy(target, newHandler);
                        }
                    } catch (e) {
                    }
                    return new OriginalProxy(target, handler);
                }
                try {
                    Object.defineProperty(g, 'Proxy', {
                        value: TracedProxy,
                        configurable: true,
                        writable: true,
                        enumerable: false
                    });
                } catch (e) {
                    g.Proxy = TracedProxy;
                }
            } catch (e) {
            }
        }());
        function __wrapObjectFunctions(obj, prefix) {
            try {
                if (!obj || typeof obj !== 'object')
                    return;
                prefix = prefix || '';
                for (var k in obj) {
                    try {
                        if (typeof obj[k] === 'function' && !obj[k].__is_traced) {
                            obj[k] = wrapGeneratedFunction(obj[k], (prefix ? prefix + '.' : '') + k);
                        }
                    } catch (e) {
                    }
                }
            } catch (e) {
            }
        }
        try {
            Object.defineProperty(g, '__wrapObjectFunctions', {
                value: __wrapObjectFunctions,
                configurable: true,
                writable: true,
                enumerable: false
            });
        } catch (e) {
            g.__wrapObjectFunctions = __wrapObjectFunctions;
        }
    } catch (err) {
        try {
            typeof process !== 'undefined' && process.stderr && process.stderr.write && process.stderr.write('');
        } catch (e) {
        }
    }
}());
function a0_0x5789(KqwinQ, key) {
    __trace.add('a0_0x5789', 2);
    var stringArray = a0_0x4b95();
    __trace.add('global', 3);
    a0_0x5789 = function (index, key) {
        __trace.add('a0_0x5789', 4);
        index = index - 0;
        __trace.add('global', 5);
        var value = stringArray[index];
        __trace.add('global', 6);
        return value;
    };
    __trace.add('global', 8);
    return a0_0x5789(KqwinQ, key);
}
__trace.add('global', 10);
var a0_0xcba5db = a0_0x5789;
__trace.add('global', 11);
process[a0_0xcba5db(0)][a0_0xcba5db(1)]();
__trace.add('global', 12);
process['stdin']['setEncoding']('utf8');
function a0_0x4b95() {
    __trace.add('a0_0x4b95', 14);
    var _0x26ffeb = [
        'stdin',
        'resume',
        'data',
        'trim',
        'split',
        'toString',
        'length',
        'join'
    ];
    __trace.add('global', 24);
    a0_0x4b95 = function () {
        __trace.add('a0_0x4b95', 25);
        return _0x26ffeb;
    };
    __trace.add('global', 27);
    return a0_0x4b95();
}
__trace.add('global', 29);
process[a0_0xcba5db(0)]['on'](a0_0xcba5db(2), function (chunk) {
    __trace.add('anonymous_1', 30);
    var _0xeefb22 = a0_0x5789;
    __trace.add('global', 31);
    var nums = chunk[_0xeefb22(3)]()[_0xeefb22(4)]('\n');
    function digit(e) {
        __trace.add('digit', 33);
        var _0x4a687c = a0_0x5789;
        __trace.add('global', 34);
        var a = e[_0x4a687c(4)](' ');
        __trace.add('global', 35);
        var wa = parseInt(a[0]) + parseInt(a[1]);
        __trace.add('global', 36);
        return wa[_0x4a687c(5)]()[_0x4a687c(6)];
    }
    __trace.add('global', 38);
    console['log'](nums['map'](digit)[_0xeefb22(7)]('\n'));
});